
# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10


#remaps
map j down
map h updir
map k up
map l open
map D delete

#map gotos
map gc cd /home/david/.config
map gh cd /home/david
map gs cd /home/david/.scripts
map gr cd /home/david/Repos
map gR cd /
map gd cd /home/david/Downloads
map gp cd /home/david/Pictures
map gD cd /home/david/Documents/
map gv cd /home/david/Videos
map gu cd /home/david/USB1
map gU cd /home/david/USB2
# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask-default $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        #*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
        *) for f in $fx; do nohup xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r --reflink=auto $fx $1
    XZ_OPT="-1 --threads=0" tar cfJ $1.tar.xz $1 -C $(readlink -f $1)
    rm -rf $1
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r --reflink=auto $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd view ${{
	sxiv $f
}}

cmd fzf_jump ${{
   res="$(find . -type d -path '*/.*' -prune -o -type d -print| fzf --reverse --header='Jump to location')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}
map f :fzf_jump

cmd fzf_jump_all ${{
   res="$(find . -print| fzf --reverse --header='Jump to location with hidden files')"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"                                                       
   fi
lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump_all

cmd paste %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -r --reflink=auto --preserve=all $list .
        notify-send "ðŸ“‹ copied files"
    elif [ $mode = 'move' ]; then
        mv $list .
        notify-send "ðŸšš moved files"
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}
